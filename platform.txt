name=qNimble
version=0.2.17
rewriting=disabled

compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O ihex -R .eeprom
compiler.elf2bin.flags=-O binary -R .eeprom

## Preprocessor Includes
recipe.preproc.includes="{compiler.path}{build.toolchain}{build.command.g++}" -M -MG -MP -x c++ -w {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} "{source_file}"

## Preprocessor Macros
recipe.preproc.macros="{compiler.path}{build.toolchain}{build.command.g++}" -E -CC -x c++ -w {compiler.cpp.flags} {build.flags.common} {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} "{source_file}" -o "{preprocessed_file_path}"

## New Preprocessor for Arduino 1.9
tools.arduino-preprocessor.path={runtime.tools.arduino-preprocessor.path}
tools.arduino-preprocessor.cmd.path={path}/arduino-preprocessor
tools.arduino-preprocessor.pattern="{cmd.path}" "{source_file}" "{codecomplete}" -- -std=gnu++14

## Precompile Arduino.h header
#recipe.hooks.sketch.prebuild.1.pattern="{runtime.tools.precompile_helper.path}/precompile_helper" "{runtime.platform.path}/cores/{build.core}" "{build.path}" "{compiler.path}{build.toolchain}{build.command.g++}" -x c++-header {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -I{build.variant.path} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} "-I{runtime.platform.path}/cores/{build.core}" "{build.path}/pch/Arduino.h" -o "{build.path}/pch/Arduino.h.gch"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{build.toolchain}{build.command.g++}" -c {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} "-I{build.path}/pch" {includes} "{source_file}" -o "{object_file}"

## Compile c files
recipe.c.o.pattern="{compiler.path}{build.toolchain}{build.command.gcc}" -c {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.c} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{build.toolchain}{build.command.gcc}" -c {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.S} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{build.toolchain}{build.command.ar}" rcs "{archive_file_path}" "{object_file}"

## Link
recipe.c.combine.pattern="{compiler.path}{build.toolchain}{build.command.linker}" {build.flags.optimize} {build.flags.ld} {build.flags.ldspecs} {build.flags.cpu} "-Wl,-Map,{build.path}/{build.project_name}.map" -o "{build.path}/{build.project_name}.elf" {object_files} "{build.path}/{archive_file}" "-L{build.path}" "-L{runtime.tools.CMSIS.path}/CMSIS/Lib/GCC" {build.flags.libs}

## Patch ELF - TODO: not supported by Arduino 1.6.6 builder
recipe.elfpatch.pattern="{compiler.path}/hardware/tools/{build.elfpatch}" -mmcu={build.mcu} "{build.path}/{build.project_name}.elf" "{sketch_path}/disk"

## Create eeprom
#recipe.objcopy.eep.pattern="{compiler.path}{build.toolchain}{build.command.objcopy}" {compiler.objcopy.eep.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.eep"

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{build.toolchain}{build.command.objcopy}" {compiler.elf2hex.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Create bin
recipe.objcopy.bin.pattern="{compiler.path}{build.toolchain}{build.command.objcopy}" {compiler.elf2bin.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create lss
#recipe.objcopy.lss.pattern="{compiler.path}{build.toolchain}{build.command.objdump}" -S "{build.path}/{build.project_name}.elf" > "{build.path}/{build.project_name}.lss"

## Post Build - inform Teensy Loader of new file
#recipe.hooks.postbuild.1.pattern="{compiler.path}stdout_redirect" "{build.path}/{build.project_name}.lst" "{compiler.path}{build.toolchain}{build.command.objdump}" -d -S -C "{build.path}/{build.project_name}.elf"
#recipe.hooks.postbuild.2.pattern="{compiler.path}stdout_redirect" "{build.path}/{build.project_name}.sym" "{compiler.path}{build.toolchain}{build.command.objdump}" -t -C "{build.path}/{build.project_name}.elf"
#recipe.hooks.postbuild.3.pattern="{compiler.path}teensy_post_compile" "-file={build.project_name}" "-path={build.path}" "-tools={compiler.path}" "-board={build.board}"

## Compute size
recipe.size.pattern="{compiler.path}{build.toolchain}{build.command.size}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.fini|\.text|\.text\.bootinfo|\.text\.flash|\.data|\.data\.[A-Za-z]+)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.fini|\.data\.DTCM|\.data\.ITCM|\.bss\.DTCM|\.data\.ITCM\.padding|\.bss\.ITCM)\s+([0-9]+).*
recipe.size.regex.allmemory=^(?:\.fini|\.data_RAM[0-9]|\.dmabuffers|\.usbbuffers|\.data|\.bss|\.bss\.dma|\.boot_hdr\.[a-z_]+|\.noinit|\.text\.itcm)\s+([0-9]+).*
recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*

#recipe.hooks.linking.postlink.1.pattern=echo linking is complete
#recipe.hooks.linking.postlink.1.pattern.windows=cmd /c echo linking is complete
#recipe.hooks.linking.postlink.2.pattern.windows=cmd /c dir
#recipe.hooks.linking.postlink.4.pattern.windows=cmd /c dir | cmd /c findstr resour

#recipe.hooks.linking.postlink.2.pattern = echo Testing this is a size calc
recipe.hooks.linking.postlink.1.pattern="{compiler.path}{build.toolchain}{build.command.size}" "{build.path}/{build.project_name}.elf" -A -x | grep -v "\.debug" | grep -v "\.stab" | grep -v "\.comment"
#recipe.hooks.linking.postlink.1.pattern.windows=cmd /c "{compiler.path}{build.toolchain}\\bin\\arm-none-eabi-size.exe {build.path}/{build.project_name}.elf -A -x" | cmd /c findstr debug
recipe.hooks.linking.postlink.1.pattern.windows=cmd /c "{compiler.path}{build.toolchain}{build.command.size} {build.path}/{build.project_name}.elf -A -x " 
#| grep -v "\.stab" | grep -v "\.comment"

tools.qbossa.path={runtime.tools.qbossa.path}
tools.qbossa.cmd=qbossac
tools.qbossa.cmd.windows=qbossac.exe
tools.qbossa.upload.params.verbose=-i -d
tools.qbossa.upload.params.quiet=
tools.qbossa.upload.pattern="{path}/{cmd}" --port={serial.port.file} -a -w -v "{build.path}/{build.project_name}.bin" -R
#tools.qbossa.upload.pattern="{path}/{cmd}" --port={serial.port.file} -U upload.native_usb} -i -e -w -v "{build.path}/{build.project_name}.bin"

## Teensy Ports Discovery (Arduino 1.8.9)
#discovery.teensy.pattern="{runtime.ide.path}/hardware/tools/teensy_ports" -J2

## Export hex
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.board}.bin




# TODO: missing patch in 1.6.6...
recipe.output.tmp_file2={build.project_name}.elf
recipe.output.save_file2={build.project_name}.elf


# documentation on this file's format
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5-3rd-party-Hardware-specification
